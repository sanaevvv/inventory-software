generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime  @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  title       String   @unique @db.VarChar(255)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  item        Item[]
}

model Unit {
  id           Int      @id @default(autoincrement())
  title        String   @unique @db.VarChar(255)
  abbreviation String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  item         Item[]
}

model Brand {
  id        Int      @id @default(autoincrement())
  brandname String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     Item[]
}

model Warehouse {
  id                          Int                       @id @default(autoincrement())
  name                        String                    @unique @db.VarChar(255)
  location                    String?
  description                 String?
  warehouseType               String
  stockQty                    Int                       @default(0)
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @updatedAt
  addStockAdjustments         AddStockAdjustment[]
  items                       Item[]
  givenTransferAdjustments    TransferStockAdjustment[] @relation("GivingWarehouse")
  receivedTransferAdjustments TransferStockAdjustment[] @relation("ReceivingWarehouse")
}

model AddStockAdjustment {
  id              Int       @id @default(autoincrement())
  referenceNumber String
  addStockQty     Int
  notes           String?
  warehouseId     Int
  supplierId      Int
  itemId          Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  item            Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  supplier        Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  warehouse       Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@index([supplierId])
}

model TransferStockAdjustment {
  id                   Int       @id @default(autoincrement())
  referenceNumber      String    @unique
  transferStockQty     Int
  notes                String?
  givingWarehouseId    Int
  receivingWarehouseId Int
  itemId               Int
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  givingWarehouse      Warehouse @relation("GivingWarehouse", fields: [givingWarehouseId], references: [id], onDelete: Cascade)
  item                 Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  receivingWarehouse   Warehouse @relation("ReceivingWarehouse", fields: [receivingWarehouseId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@index([givingWarehouseId])
  @@index([receivingWarehouseId])
}

model Item {
  id                       Int                       @id @default(autoincrement())
  title                    String                    @unique @db.VarChar(255)
  description              String?
  categoryId               Int
  sku                      String                    @unique
  barcode                  String?
  qty                      Int
  unitId                   Int
  brandId                  Int
  sellingPrice             Int
  buyingPrice              Int
  supplierId               Int
  warehouseId              Int
  reOrderPoint             Int
  imageUrl                 String
  weight                   Int?
  dimensions               String?
  taxRate                  Int
  notes                    String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  addStockAdjustments      AddStockAdjustment[]
  brand                    Brand                     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  category                 Category                  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  supplier                 Supplier                  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  unit                     Unit                      @relation(fields: [unitId], references: [id])
  warehouse                Warehouse                 @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  transferStockAdjustments TransferStockAdjustment[]

  @@index([categoryId])
  @@index([unitId])
  @@index([brandId])
  @@index([warehouseId])
  @@index([supplierId])
}

model Supplier {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique @db.VarChar(255)
  phone               String?
  email               String?
  address             String?
  contactPerson       String?
  supplierCode        String               @unique
  paymentTerms        String?
  taxId               String?
  notes               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  AddStockAdjustments AddStockAdjustment[]
  items               Item[]
}
